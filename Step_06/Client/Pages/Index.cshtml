@page
@model Client.Pages.IndexModel
@inject Infrastructure.Security.AuthenticatedUserService AuthenticatedUserService

<h3>
	Page: Home
</h3>

@{
	// فلسفه کلاس
	// AuthenticatedUserService

	var currentRoleCode =
		Domain.Features.Identity.Enums.RoleEnum.SimpleUser;

	if (User.Identity is not null && User.Identity.IsAuthenticated)
	{
		var claim =
			User.Claims
			.Where(current => current.Type.ToLower() ==
				Infrastructure.Security.Constants.RoleCodeClaimKeyName.ToLower())
			.FirstOrDefault();

		if (claim is not null)
		{
			var claimValue = claim.Value;

			if (string.IsNullOrWhiteSpace(value: claimValue) == false)
			{
				try
				{
					currentRoleCode =
						(Domain.Features.Identity.Enums.RoleEnum)
						System.Convert.ToInt32(value: claimValue);
				}
				catch { }
			}
		}
	}

	// !که تقریبا نابود می‌شویم
	if(currentRoleCode == Domain.Features.Identity.Enums.RoleEnum.Administrator)
	{
		// ...
	}

	// در صورتی که با این کلاس می‌توانیم
	// ها دسترسی داشته باشیم Claim به سادگی، به همه
	if(AuthenticatedUserService.RoleCode == Domain.Features.Identity.Enums.RoleEnum.Administrator)
	{
		// ...
	}
}

@if (AuthenticatedUserService.IsAuthenticated)
{
	<hr />
	<b>Welcome @(AuthenticatedUserService.Name)!</b>
}

<hr />

<a href="~/Index">Home</a>

@if (AuthenticatedUserService.IsAuthenticated)
{
	<text>| </text>
	<a href="~/MySecuredPage">My Secured Page</a>

	@*New*@
	<text>| </text>
	<a href="~/Account/AuthenticatedUserInformation">Authenticated User Information</a>

	@*New*@
	<text>| </text>
	<a href="~/MyAdminPage">My Admin Page</a>
}

@if (AuthenticatedUserService.IsAuthenticated == false)
{
	<text>| </text>
	<a href="~/Account/Login">Login</a>

	<text>| </text>
	<a href="~/Account/Register">Register</a>
}

@if (AuthenticatedUserService.IsAuthenticated)
{
	<text>| </text>
	<a href="~/Account/Logout">Logout</a>
}

@if (AuthenticatedUserService.IsAuthenticated)
{
	<text>| </text>
	<a href="~/Account/AccessDenied">Access Denied</a>
}

|
<a href="~/My/Index">My Controller: Index</a>

@if (AuthenticatedUserService.IsAuthenticated)
{
	<text>| </text>
	<a href="~/My/MySecuredAction">My Controller: My Secured Action</a>
}

|
<a href="~/api/MyApi">My Api: (GET)</a>

@if (AuthenticatedUserService.IsAuthenticated)
{
	<text>| </text>
	<button onclick="getData()" type="button">My Api: POST</button>
}

<hr />

<script>

	function getData() {

		let request = null

		fetch('/api/MyApi', {

			method: 'POST',

			headers: {
				'Accept': 'application/json; charset=UTF-8',
				'Content-Type': 'application/json; charset=UTF-8'
			},

			body: JSON.stringify(request)

		})
			.then(response => response.json())

			.then(data => {

				console.log(JSON.stringify(data))

			})
			.catch(error => {

				console.error('Error 401 - Unauthorize!')

			})

	}

</script>
